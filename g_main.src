// ////////////////////////////////////////////////////////////////////////////
// Core and general game systems
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Constant definitions
// ////////////////////////////////////////////////////////////////////////////

declare proSubject    0
declare proObject     1
declare proPos        2
declare proAdject     3
declare proReflex     4

declare skillMelee    0
declare skillRanged   1
declare skillMagic    2

declare dtBlunt       "blunt"
declare dtCutting     "cutting"
declare dtPiercing    "piercing"
declare dtFire        "fire"
declare dtAir         "air"
declare dtEarth       "earth"
declare dtWater       "water"

// ////////////////////////////////////////////////////////////////////////////
// Common strings
// ////////////////////////////////////////////////////////////////////////////

declare hoursPerDay       1440
declare minutesPerHour    60
declare continueStr       "Continue"

object sexNeuter
    article             "a "
    name                "neuter"
    pronouns            [ "it" "it" "its" "its" "itself" ]
;
object sexMale
    article             "a "
    name                "male"
    pronouns            [ "he" "him" "his" "his" "himself" ]
;
object sexFemale
    article             "a "
    name                "female"
    pronouns            [ "she" "her" "her" "hers" "herself" ]
;

object speciesHuman
    article             "a "
    name                "human"
;
object speciesGnoll
    article             "a "
    name                "gnoll"
;
object speciesDragon
    article             "a "
    name                "dragon"
;

object thePlayer
    article             "the "
    name                "player"
    sex                 sexNeuter
    species             speciesHuman
    faction             0
    inventory           {}
    skills {
        skillMelee:     10
        skillRanged:    12
        skillMagic:     8
    }
;

object world
    time                720 // start game at noon
    location            0
    locationName        0
    inLocation          0
    newLocation         0
;


// ////////////////////////////////////////////////////////////////////////////
// Utility functions
// ////////////////////////////////////////////////////////////////////////////

function addContinue() {
    (option continueStr (get world $location))
}

function dispatch(event extra : result) {
    (if (neq (typeof event) Object)
        (set event (get world $location)))
    (while 1
        (proc
            (set result ((get event $body) extra))
            (if (neq (typeof result) Object) (break))
            (set event result)
            (set extra 0)))

    (setp world $inLocation false)
    (setp world $newLocation false)

    (set result (get event $location))
    (if (neq result 0)
        (proc
            (setp world $inLocation true)
            (if (neq event (get world $location))
                (proc
                    (setp world $newLocation true)
                    (setp world $location event)
                    (setp world $locationName result)
                    (set_setting infobarLeft result)))))

//    "\nIN LOCATION: " say $inLocation world get say
//    "\nNEW LOCATION: " say $newLocation world get say
//    "\nLOCATION NAME: " say $locationName world get say
    (get_option dispatch)
}

asm_function main() {
    "Caged Gnoll" infobarTitle set_setting
    start 1 dispatch call
}


asm_function sayA(theObject upperFirst) {
    $article theObject get say
    $name theObject get say
}
asm_function sayThe(theObject upperFirst) {
    "the " say
    $name theObject get say
}
asm_function sayName(theObject upperFirst) {
    $name theObject get say
}
asm_function sayPronoun(who thePronoun upperFirst) {
    thePronoun $pronouns $sex who get get get
    upperFirst asUpper jnz say return asUpper: say_uf
}

function skillCheck(who skill modifier : roll total) {
    (if (eq (typeof modifier) None)
        (set modifier 0))
    (set skill (get (get who $skills) skill))
    ("[(" skill "+" modifier ")=" (add skill modifier) " vs (")

    (set roll (random 1 7))   (print roll "+")    (set total roll)
    (set roll (random 1 7))   (print roll "+")    (set total (add total roll))
    (set roll (random 1 7))   (print roll ")=")   (set total (add total roll))
    (print total)

    (if (gte (add skill modifier) total)
        (proc
            (" = success]")
            (return 1))
        (proc
            (" = fail]"
            (return 0))))
}


// ////////////////////////////////////////////////////////////////////////////
// Inventory functions
// ////////////////////////////////////////////////////////////////////////////

asm_function addItems(item qty : invMap) {
    $inventory thePlayer get *invMap set
    item invMap has alreadyHas jnz
    qty item invMap setp
    1 return

    alreadyHas:
    item invMap get qty add item invMap setp
    1 return
}

asm_function removeItems(item qty : invMap) {
    qty item 1 itemQty call stack_dup qty gt notEnough jnz
    $inventory thePlayer get *invMap set
    sub item invMap setp
    item invMap get alldone jnz
    item invMap del
    alldone: 1 return
    notEnough: 0 return
}

asm_function itemQty(item : invMap) {
    $inventory thePlayer get *invMap set
    item invMap get return
}


// ////////////////////////////////////////////////////////////////////////////
// Generic store functions
// ////////////////////////////////////////////////////////////////////////////

function doStoreList(storeObject promptStr : storeList listSize item index optText) {
    (print promptStr "\n")

    (set storeList (get storeObject $saleList))
    (set listSize (size storeList))
    (set index 0)
    (while (lt index listSize)
        (proc
            (set item (get storeList index))
            (say_uf (get item $name))
            (" is " (get item $price) " gold pieces[br]")
            (if (lte (get item $price) (itemQty gold))
                (proc
                    (set optText (new String))
                    (strcat optText "Buy ")
                    (strcat optText (get item $name))
                    (setp storeBuyEvent $returnEvent storeObject)
                    (option optText storeBuyEvent item)))
            (set index (add index 1))))

    (set index (itemQty gold))
    (if (lte index 0) ("\nYou are currently broke.")
        (if (eq index 1)
            ("\nYou have a single gold piece.")
            ("\nYou have " (itemQty gold) " gold pieces.")))

    (option "Buy nothing" (get world $location))
}
object storeBuyEvent
    body function(item) {
        (option continueStr (get self $returnEvent))
        (if (removeItems gold (get item $price))
            (proc
                (addItems item 1)
                ("You buy ")
                (sayA item)
                ("."))
            ("You can't afford it."))
    }
;


// ////////////////////////////////////////////////////////////////////////////
// Startup and chargen
// ////////////////////////////////////////////////////////////////////////////

object start
    body function() {
        ("Welcome to game!\nYou can select options by clicking on them or (for options up to ten) by pressing the appropriate number key.")
        (option "Start game" chargen1)
    }
;

object chargen1
    body function() {
        ("What sex are you?")
        (option "Male"   chargen2   sexMale)
        (option "Female" chargen2   sexFemale)
    }
;
object chargen2
    body function(choice) {
        (setp thePlayer $sex choice)

        ("What species are you?")
        (option "Human"     chargen3    speciesHuman)
        (option "Gnoll"     chargen3    speciesGnoll)
        (option "Dragon"    chargen3    speciesDragon)
    }
;
object chargen3
    body asm_function(choice) {
        choice $species thePlayer setp

        50 gold 2 addItems call
        1 loincloth 2 addItems call

        "Character" pageCharacter 99 add_page
        "Inventory" pageInventory 105 add_page

        forestPath
    }
;


// ////////////////////////////////////////////////////////////////////////////
// Page handlers
// ////////////////////////////////////////////////////////////////////////////

function pageCharacter() {
    (print "You are ")
    (sayA (get thePlayer $sex))
    (print " " (get (get thePlayer $species) $name)
           ".")

    (option continueStr pageDone)
    (get_option pageDispatch)
}

asm_function pageInventory(: list keys itemCount counter) {
    $inventory thePlayer get *list set
    list get_keys *keys set
    keys size *itemCount set
    0 *counter set
    loopStart:
    counter itemCount lte done jnz
    counter 1 add say
    ") " say
    counter keys get 1 sayName call
    " (x" say
    counter keys get list get say
    ")[br]" say
    counter 1 add *counter set
    loopStart jmp

    done:

    continueStr pageDone none none add_option
    pageDispatch get_option
}

asm_function pageDispatch(event extra : result) {
    extra 1 event call
    *result set
}

asm_function pageDone() {
    end_page
}

// ////////////////////////////////////////////////////////////////////////////
// General item definitions
// ////////////////////////////////////////////////////////////////////////////

object gold
    article     "a "
    name        "gold piece"
    plural      "gold pieces"
    description "The coin of the realm."
;

object loincloth
    article     "a "
    name        "loincloth"
    plural      "loincloths"
    slot        "body"
;


// ////////////////////////////////////////////////////////////////////////////
// Generic nodes for resting
// ////////////////////////////////////////////////////////////////////////////

object restAwhile
    body asm_function() {
        "How long would you like to rest for?" say
        "One hour"      restAwhileDoit    60  none add_option
        "Six hours"     restAwhileDoit    360 none add_option
        "Twelve hours"  restAwhileDoit    720 none add_option
        "Don't rest" $location world get  none none add_option
    }
;

object restAwhileDoit
    body asm_function(length) {
        "You rest for a while. " say
//        length do_rest
        0 addContinue call
    }
;


